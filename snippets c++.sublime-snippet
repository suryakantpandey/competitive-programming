<snippet>
	<content><![CDATA[
// #pragma GCC optimize("Ofast,unroll-loops")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,mmx,avx,avx2")
#include "bits/stdc++.h"

#define     int               long long
#define     ul                unsigned long long
#define     ld                long double
#define     rep(i, a, b)      for(int i=(a); i<(b); i++)
#define     repi(i, a, b)     for(int i=(a); i>(b); i--)
#define     sz(x)             (int)((x).size())
#define     pb                push_back
#define     all(x)            x.begin(), x.end()
#define     rall(x)           x.rbegin(), x.rend()
#define     db(x)             (cout<<#x<<":"<<(x)<<'\n')
#define     fastio            ios_base::sync_with_stdio(false), cin.tie(nullptr)
#define     gcd               __gcd
#define     lcm(a,b)          __detail::__lcm(a,b)
#define     goog(tno)         cout << "Case #" << tno <<": "
#define     pb                push_back
#define     endl              "\n"
#define     iceil(n, x)       (((n) + (x) - 1) / (x))
#define     cps               CLOCKS_PER_SEC

const int mod = 1000000007;
const ld pi=3.1415926535897932384626433832795;
const int INF=1e18;

using namespace std;

void solve()
{
   $0
}
//special case (n==1?)
signed main() {
    clock_t clk = clock();
    fastio;
    int t=1 ;
    // cin >> t ;
    while( t-- )
        solve() ;
    cerr << "Time (in ms): " << (double)(clock() - clk) * 1000.0 / cps << '\n';

    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>incl</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
